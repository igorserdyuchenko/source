stages:
  - lint
  - test
  - build
  - deploy

variables:
  NODE_ENV: production
  AWS_REGION: us-east-1
  AWS_ACCOUNT_ID: "123456789012"
  ECR_REPOSITORY: "my-app"
  IMAGE_TAG: ${CI_COMMIT_REF_SLUG}
  DOCKER_IMAGE: "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}:${IMAGE_TAG}"
  CACHE_DIR: .cache

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - node_modules/
    - ${CACHE_DIR}/

before_script:
  - echo "Running CI for branch: ${CI_COMMIT_REF_NAME}"
  - export PATH="./node_modules/.bin:$PATH"

lint:
  stage: lint
  image: node:18
  script:
    - npm ci
    - npm run lint
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" || $CI_MERGE_REQUEST_ID'
  allow_failure: false

test:
  stage: test
  image: node:18
  services:
    - postgres:latest
  variables:
    POSTGRES_DB: testdb
    POSTGRES_USER: testuser
    POSTGRES_PASSWORD: testpass
  script:
    - npm ci
    - npm test
  artifacts:
    paths:
      - coverage/
    reports:
      junit: report.xml
  parallel:
    matrix:
      - NODE_VERSION: ["16", "18"]
  name: "test-node-${NODE_VERSION}"

build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - apk add --no-cache aws-cli bash
    - aws --version
    - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
  script:
    - docker build -t $DOCKER_IMAGE .
    - docker push $DOCKER_IMAGE
  dependencies:
    - test
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'

deploy:
  stage: deploy
  image: amazon/aws-cli
  before_script:
    - apk add --no-cache bash
    - aws --version
    - aws eks update-kubeconfig --region $AWS_REGION --name my-cluster
  script:
    - set -e
    - kubectl set image deployment/my-app my-app=$DOCKER_IMAGE
    - kubectl rollout status deployment/my-app
  environment:
    name: production
    url: https://myapp.com
  rules:
    - if: '$CI_COMMIT_TAG'
  when: manual
