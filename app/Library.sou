<?xml version="1.0"?>

<st-source>
<time-stamp>From VisualWorksÂ®, 7.4 of December 5, 2005 on October 6, 2025 at 10:21:00 am</time-stamp>
<!-- Package LibraryExample* -->


<component-property>
<name>LibraryExample</name>
<type>package</type>
<property>packageName</property>
<value>'LibraryExample'</value>
</component-property>


<!-- ====================================================== -->
<!-- Class: Book -->
<!-- ====================================================== -->

<class>
<name>Book</name>
<environment>Smalltalk</environment>
<super>Core.Object</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>title author checkedOut </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>LibraryExample</category>
<attributes>
<package>LibraryExample</package>
</attributes>
</class>

<comment>
<class-id>Book</class-id>
<body>
Book represents a single book in the library.
It knows its title, author, and whether it is checked out.
</body>
</comment>

<methods>
<class-id>Book</class-id> <category>accessing</category>

<body package="LibraryExample" selector="title">title
	^title</body>

<body package="LibraryExample" selector="title:">title: aString
	title := aString</body>

<body package="LibraryExample" selector="author">author
	^author</body>

<body package="LibraryExample" selector="author:">author: aString
	author := aString</body>

<body package="LibraryExample" selector="checkedOut">checkedOut
	^checkedOut</body>

<body package="LibraryExample" selector="checkedOut:">checkedOut: aBoolean
	checkedOut := aBoolean</body>
</methods>

<methods>
<class-id>Book</class-id> <category>printing</category>

<body package="LibraryExample" selector="printString">printString
	^String streamContents: [:s |
		s nextPutAll: title; nextPutAll: ' by '; nextPutAll: author]</body>
</methods>


<!-- ====================================================== -->
<!-- Class: Member -->
<!-- ====================================================== -->

<class>
<name>Member</name>
<environment>Smalltalk</environment>
<super>Core.Object</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>name borrowedBooks </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>LibraryExample</category>
<attributes>
<package>LibraryExample</package>
</attributes>
</class>

<comment>
<class-id>Member</class-id>
<body>
Member represents a person in the library system.
Each member has a name and a collection of borrowed books.
</body>
</comment>

<methods>
<class-id>Member</class-id> <category>accessing</category>

<body package="LibraryExample" selector="name">name
	^name</body>

<body package="LibraryExample" selector="name:">name: aString
	name := aString</body>

<body package="LibraryExample" selector="borrowedBooks">borrowedBooks
	^borrowedBooks</body>
</methods>

<methods>
<class-id>Member</class-id> <category>initialization</category>

<body package="LibraryExample" selector="initialize">initialize
	super initialize.
	borrowedBooks := OrderedCollection new.</body>
</methods>

<methods>
<class-id>Member</class-id> <category>borrowing</category>

<body package="LibraryExample" selector="borrow:">borrow: aBook
	aBook checkedOut: true.
	borrowedBooks add: aBook.</body>

<body package="LibraryExample" selector="return:">return: aBook
	aBook checkedOut: false.
	borrowedBooks remove: aBook ifAbsent: [].</body>
</methods>


<!-- ====================================================== -->
<!-- Class: Library -->
<!-- ====================================================== -->

<class>
<name>Library</name>
<environment>Smalltalk</environment>
<super>Core.Object</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>books members </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>LibraryExample</category>
<attributes>
<package>LibraryExample</package>
</attributes>
</class>

<comment>
<class-id>Library</class-id>
<body>
Library manages all books and members in the system.
It can add new books, register members, and display status.
</body>
</comment>

<methods>
<class-id>Library</class-id> <category>initialization</category>

<body package="LibraryExample" selector="initialize">initialize
	super initialize.
	books := OrderedCollection new.
	members := OrderedCollection new.</body>
</methods>

<methods>
<class-id>Library</class-id> <category>adding</category>

<body package="LibraryExample" selector="addBook:">addBook: aBook
	books add: aBook.</body>

<body package="LibraryExample" selector="registerMember:">registerMember: aMember
	members add: aMember.</body>
</methods>

<methods>
<class-id>Library</class-id> <category>listing</category>

<body package="LibraryExample" selector="listBooks">listBooks
	^books collect: [:each | each printString].</body>

<body package="LibraryExample" selector="listMembers">listMembers
	^members collect: [:each | each name].</body>
</methods>

<!-- ====================================================== -->
<!-- Class: LibrarySystem -->
<!-- ====================================================== -->

<class>
<name>LibrarySystem</name>
<environment>Smalltalk</environment>
<super>Core.Object</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars></inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>LibraryExample</category>
<attributes>
<package>LibraryExample</package>
</attributes>
</class>

<comment>
<class-id>LibrarySystem</class-id>
<body>
LibrarySystem is the main entry point for the LibraryExample package.
It creates a Library, adds books and members, and demonstrates the full system.
</body>
</comment>

<!-- ====================================================== -->
<!-- Class-side (LibrarySystem class): main -->
<!-- ====================================================== -->

<methods>
<class-id>LibraryMainClass</class-id> <category>examples</category>

<body package="LibraryExample" selector="main">main
	"Main entry point for the LibraryExample demo."

	| library alice bob book1 book2 |

	library := Library new.

	book1 := Book new
		title: 'Smalltalk Best Practices';
		author: 'Kent Beck';
		yourself.

	book2 := Book new
		title: 'Refactoring';
		author: 'Martin Fowler';
		yourself.

	alice := Member new name: 'Alice'; yourself.
	bob := Member new name: 'Bob'; yourself.

	library addBook: book1.
	library addBook: book2.
	library registerMember: alice.
	library registerMember: bob.

	alice borrow: book1.
	bob borrow: book2.

	Transcript
		cr; show: '=== LibrarySystem Demo ==='; cr;
		show: 'Books: ', library listBooks printString; cr;
		show: 'Members: ', library listMembers printString; cr;
		show: '--- End of Demo ---'; cr.
</body>
</methods>


</st-source>
